apply plugin: 'com.android.library'

version = VERSION_NAME_SDK

android {
    namespace 'cn.dataeye.android'
    compileSdk 35

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 21
        targetSdk 34
        versionCode 1
        versionName "${version}"
        consumerProguardFile 'proguard-rules.pro'

        testApplicationId "cn.thinkingdata.analytics"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        buildConfigField("String", "DATAEYE_VERSION", "\"${version}\"")
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name == 'debug') {
                outputFileName = "DataEyeSDK-Debug-${version}.aar"
            } else {
//                outputFileName = "DataEyeSDK-Release-${version}.aar"
                outputFileName = "${PUBLISH_ARTIFACT_ID}.aar"
            }
        }
    }

    buildFeatures {
        buildConfig true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'

    testImplementation 'org.mockito:mockito-core:2.19.0'
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.3.0-alpha01'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2-alpha01'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha01'
    androidTestUtil 'androidx.test:orchestrator:1.2.0'
}

// 创建 Jar 包
def SDK_BASENAME = "ThinkingAnalyse";
def baseName = SDK_BASENAME
def destinationDir = ""
def SDK_VERSION = "-${version}"
def sdkDestinationPath = "build/outputs/jar/";
def zipFile = file('build/intermediates/packaged-classes/release/classes.jar')

task deleteBuild(type: Delete) {
    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + ".jar"
}

task makeJar(type: Jar) {
    from zipTree(zipFile)
    from fileTree(dir: 'src/main', includes: ['assets/**'])// 打包assets目录下的所有文件
    baseName = SDK_BASENAME
    destinationDir = file(sdkDestinationPath)
}

makeJar.dependsOn(deleteBuild, build)

// maven central发布
// io.github.dataeyesdk:dataeye-android-sdk:1.0.1
ext {
    PUBLISH_GROUP_ID = "io.github.dataeyesdk"        //项目包名
    PUBLISH_ARTIFACT_ID = 'dataeye-android-sdk'            //项目名
    PUBLISH_VERSION = version                    //版本号
}
apply from: "publish.gradle"